buildscript {
    repositories {
        jcenter()
        mavenCentral()
        maven { url "https://plugins.gradle.org/m2/" }
    }
    dependencies {
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "org.jetbrains.kotlin:kotlin-serialization:$kotlin_version"
        classpath "org.jlleitschuh.gradle:ktlint-gradle:$ktlint_gradle_version"
    }
}

subprojects {
    configurations {
        all {
            resolutionStrategy {
                // fail eagerly on version conflict (includes transitive dependencies)
                // e.g. multiple different versions of the same dependency (group and name are equal)
                failOnVersionConflict()

                // prefer modules that are part of this build (multi-project or composite build) over external modules
                preferProjectModules()

            }
        }
    }

    repositories {
        maven { url 'https://jitpack.io' }
        mavenCentral()
    }
}

// All Kotlin modules
allprojects {
    apply plugin: "java"
    apply plugin: 'kotlin'
    apply plugin: 'kotlinx-serialization'
    apply plugin: 'kotlin-kapt'
    apply plugin: "org.jlleitschuh.gradle.ktlint"

    repositories {
        mavenCentral()
        maven { url 'https://jitpack.io' }
    }

    configurations {
        ktlint
    }

    dependencies {
        implementation "org.jetbrains.kotlin:kotlin-stdlib-jdk8:$kotlin_version"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:$kotlinx_version"
        implementation "org.jetbrains.kotlinx:kotlinx-coroutines-slf4j:$kotlinx_version"

        // CloudBee Feature Flags
        implementation "io.rollout.rox:rox-java-server:$rox_version"

        // OpenTelemetry
        implementation "io.opentelemetry:opentelemetry-api:$otel_version"
        implementation "io.opentelemetry:opentelemetry-extension-annotations:$otel_version"
    }

    compileKotlin {
        kotlinOptions {
            freeCompilerArgs = [
              "-Xjsr305=strict",
              "-Xopt-in=kotlin.time.ExperimentalTime",
            ]
            jvmTarget = "1.8"
        }
    }
    compileTestKotlin {
        kotlinOptions {
            freeCompilerArgs = [
              "-Xjsr305=strict",
            ]
            jvmTarget = "1.8"
        }
    }

    test {
        useJUnitPlatform()
        testLogging {
            events "passed", "skipped", "failed"
        }
    }

    ktlint {
        additionalEditorconfigFile = file(".editorconfig")
        disabledRules = ["no-wildcard-imports"]
        filter {
            exclude("**/bin/**")
            exclude("**/build/**")
            exclude("**/generated/**")
            exclude("**/clients/**")
        }
    }
}